name: Build Executables

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsecret-1-dev libdbus-1-dev
        sudo apt-get install -y libffi-dev libssl-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install keyring
        pip install secretstorage  # For Linux keyring support
        pip install keyrings.alt  # Alternative keyring backends
        pip install jeepney      # D-Bus for Linux
        pip freeze > requirements.txt

    - name: Build executable with PyInstaller
      run: |
        pyinstaller \
          --onefile \
          --name tailsshport \
          --console \
          --hidden-import=keyring.backends.Windows.WinVaultKeyring \
          --hidden-import=keyring.backends.macOS.Keyring \
          --hidden-import=keyring.backends.SecretService.Keyring \
          --hidden-import=keyring.backends.kwallet.DBusKeyring \
          --hidden-import=keyring.backends.chainer \
          --hidden-import=secretstorage \
          --hidden-import=jeepney \
          --hidden-import=keyrings.alt \
          --collect-all keyring \
          --collect-all secretstorage \
          --collect-all jeepney \
          tailsshport.py

    - name: Test executable
      run: |
        # Test that the executable runs and shows help
        ./dist/tailsshport --help || true
        # Test dependency check
        ./dist/tailsshport --check-deps || true

    - name: Create release directory
      run: |
        mkdir -p release
        cp dist/tailsshport release/
        cat > release/README.txt << 'EOF'
        Tailscale SSH Port Scanner and Connector
        ========================================
        
        This is a standalone executable version of tailsshport.
        
        Requirements:
        - Tailscale must be installed and running on your system
        - SSH client must be available in PATH
        - For password authentication: sshpass (Linux/macOS only)
        
        Usage:
        ------
        ./tailsshport --help           # Show help
        ./tailsshport --check-deps     # Check system dependencies  
        ./tailsshport --list-only      # Just list machines
        ./tailsshport                  # Interactive mode
        
        The executable will:
        1. Scan your Tailscale network for machines with SSH ports open
        2. Allow you to select a machine to connect to
        3. Remember your authentication preferences using system keyring
        4. Connect via SSH
        
        Note: This executable is portable but still requires external 
        dependencies (tailscale, ssh, optionally sshpass) to be installed
        on your system.
        EOF

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: tailsshport-linux
        path: release/
        retention-days: 30

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install keyring
        pip install keyrings.alt
        pip install pywin32
        pip freeze > requirements.txt

    - name: Build executable with PyInstaller
      shell: pwsh
      run: |
        pyinstaller `
          --onefile `
          --name tailsshport.exe `
          --console `
          --hidden-import=keyring.backends.Windows.WinVaultKeyring `
          --hidden-import=keyring.backends.macOS.Keyring `
          --hidden-import=keyring.backends.SecretService.Keyring `
          --hidden-import=keyring.backends.kwallet.DBusKeyring `
          --hidden-import=keyring.backends.chainer `
          --hidden-import=keyrings.alt `
          --collect-all keyring `
          tailsshport.py

    - name: Test executable
      shell: pwsh
      run: |
        # Test that the executable runs and shows help
        ./dist/tailsshport.exe --help || true
        # Test dependency check
        ./dist/tailsshport.exe --check-deps || true

    - name: Create release directory
      shell: pwsh
      run: |
        mkdir -p release
        cp dist/tailsshport.exe release/
        @"
        Tailscale SSH Port Scanner and Connector
        ========================================
        
        This is a standalone executable version of tailsshport.
        
        Requirements:
        - Tailscale must be installed and running on your system
        - SSH client must be available in PATH
        
        Usage:
        ------
        tailsshport.exe --help           # Show help
        tailsshport.exe --check-deps     # Check system dependencies  
        tailsshport.exe --list-only      # Just list machines
        tailsshport.exe                  # Interactive mode
        
        The executable will:
        1. Scan your Tailscale network for machines with SSH ports open
        2. Allow you to select a machine to connect to
        3. Remember your authentication preferences using system keyring
        4. Connect via SSH
        
        Note: This executable is portable but still requires external 
        dependencies (tailscale, ssh) to be installed on your system.
        "@ > release/README.txt

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: tailsshport-windows
        path: release/
        retention-days: 30

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: tailsshport-linux
        path: tailsshport-linux
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: tailsshport-windows
        path: tailsshport-windows
    
    - name: Get version from tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Package Linux version
        cd tailsshport-linux
        tar -czf ../release-assets/tailsshport-${{ env.VERSION }}-linux.tar.gz *
        cd ..
        
        # Package Windows version  
        cd tailsshport-windows
        zip -r ../release-assets/tailsshport-${{ env.VERSION }}-windows.zip *
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        body: |
          ## Tailscale SSH Port Scanner and Connector ${{ env.VERSION }}
          
          Standalone executables for Windows and Linux.
          
          ### Requirements
          - Tailscale installed and running
          - SSH client in PATH  
          - sshpass (optional, for password auth on Linux/macOS)
          
          ### Downloads
          - **Linux**: `tailsshport-${{ env.VERSION }}-linux.tar.gz`
          - **Windows**: `tailsshport-${{ env.VERSION }}-windows.zip`
          
          ### Usage
          ```bash
          # Check dependencies
          ./tailsshport --check-deps
          
          # List available machines
          ./tailsshport --list-only
          
          # Interactive connection
          ./tailsshport
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
